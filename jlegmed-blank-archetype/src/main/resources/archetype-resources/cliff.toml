#set($hash = '#')
#set($dollar = '$')
#set($bslash = '\')
${hash} git-cliff ~ configuration file
${hash} https://git-cliff.org/docs/configuration
${hash}
${hash} Lines starting with "${hash}" are comments.
${hash} Configuration options are organized into tables and keys.
${hash} See documentation for more information on available options.

[changelog]
${hash} changelog header
header = """
${hash} Changelog${bslash}n
All notable changes to this project will be documented in this file.${bslash}n

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).${bslash}n
"""
${hash} template for the changelog body
${hash} https://keats.github.io/tera/docs/${hash}introduction
body = """
{% if version %}${bslash}
    ${hash}${hash} [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}${bslash}
    ${hash}${hash} [unreleased]
{% endif %}${bslash}

{% macro commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}{% if commit.breaking %}[**breaking**] {% endif %}${bslash}
        {{ commit.message | upper_first }} - ([{{ commit.id | truncate(length=7, end="") }}](<REPO>/commit/{{ commit.id }}))${bslash}
{% endmacro -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ${hash}${hash}${hash} {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}${bslash}n{% endraw %}${bslash}
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}${bslash}n
"""
${hash} remove the leading and trailing whitespace from the template
trim = true
${hash} changelog footer
footer = """
<!-- generated by git-cliff -->
"""
${hash} postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "${vcsRepository}" }, ${hash} replace repository URL
]

[git]
${hash} parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
${hash} filter out the commits that are not conventional
filter_unconventional = true
${hash} process each line of a commit as an individual commit
split_commits = false
${hash} regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '${bslash}((${bslash}w+${bslash}s)?${hash}([0-9]+)${bslash})', replace = "([${hash}${dollar}{2}](<REPO>/issues/${dollar}{2}))" },
]
${hash} regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->⛰️  Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
    { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
    { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^style", group = "<!-- 5 -->🎨 Styling" },
    { message = "^test", group = "<!-- 6 -->🧪 Testing" },
    { message = "^deps", group = "<!-- 7 -->🤖 Dependencies"},
    { message = "^chore${bslash}${bslash}(release${bslash}${bslash})", skip = true },
    { message = "^chore${bslash}${bslash}(pr${bslash}${bslash})", skip = true },
    { message = "^chore${bslash}${bslash}(pull${bslash}${bslash})", skip = true },
    { message = "^chore${bslash}${bslash}(doc${bslash}${bslash})", skip = true },
    { message = "^chore${bslash}${bslash}(deps${bslash}${bslash})", skip = true },
    { message = "^chore|ci", group = "<!-- 8 -->⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 9 -->🛡️ Security" },
    { message = "^revert", group = "<!-- 10 -->◀️ Revert" },
    { message = "BREAKING", group = "<!-- 11 -->🚨 BREAKING Changes" },
]
${hash} protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
${hash} filter out the commits that are not matched by commit parsers
filter_commits = false
${hash} glob pattern for matching git tags
tag_pattern = '${bslash}w+-?${bslash}d+${bslash}.${bslash}d+${bslash}.${bslash}d+'
${hash} regex for skipping tags
skip_tags = "beta|alpha"
${hash} regex for ignoring tags
ignore_tags = ""
${hash} sort the tags topologically
topo_order = false
${hash} sort the commits inside sections by oldest/newest order
sort_commits = "oldest"